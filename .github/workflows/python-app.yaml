name: Python Package CI/CD

on:
  push:
    branches: [main, dev]  # Added develop branch
    tags:
      - 'v*.*.*'  # Trigger on semantic version tags
  pull_request:
    branches: [main, dev, 'feature/*', 'hotfix/*', 'fix/*']
    types: [opened, synchronize, reopened]
  workflow_dispatch:  # Allow manual triggering

# Set permissions for security
permissions:
  contents: read

# Cancel previous runs on new push
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Cache pip dependencies for linting tools
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-lint-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-lint-pip-

      - name: Install Ruff
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff Linting
        run: |
          echo "::group::Ruff Linting"
          ruff check . --output-format=github
          echo "::endgroup::"

      - name: Run Ruff Formatting Check
        run: |
          echo "::group::Ruff Formatting"
          ruff format --check --diff .
          echo "::endgroup::"

  test:
    runs-on: ubuntu-22.04
    needs: lint  # Run tests only after linting passes
    strategy:
      fail-fast: false  # Continue testing other Python versions if one fails
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Cache pip and pytest for each Python version
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .pytest_cache
          key: ${{ runner.os }}-test-py${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-py${{ matrix.python-version }}-
            ${{ runner.os }}-test-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev] pytest-xdist

      - name: Run tests
        run: pytest -v -p no:warnings --numprocesses=auto

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Cache security tools
      - name: Cache security tools
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-security-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-security-pip-

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]

      - name: Run Bandit security scan
        run: |
          # Gate on HIGH severity & MEDIUM confidence; produce JSON artifact
          bandit -r flixopt/ -c pyproject.toml -f json -o bandit-report.json -q -lll -ii
          # Human-readable output without affecting job status
          bandit -r flixopt/ -c pyproject.toml -q --exit-zero

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: bandit-report.json
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [lint, test, security]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Sync changelog to docs
        run: |
          cp CHANGELOG.md docs/changelog.md
          echo "âœ… Synced changelog to docs"

      - name: Extract release notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Extracting release notes for version: $VERSION"
          python scripts/extract_release_notes.py $VERSION > current_release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: current_release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-22.04
    needs: [test, create-release]  # Run after tests and release creation
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')  # Only on tag push
    environment:
      name: testpypi
      url: https://test.pypi.org/p/flixopt

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Cache build tools
      - name: Cache build tools
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-build-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-build-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools wheel twine

      - name: Build the distribution
        run: |
          python -m build

      - name: Upload to TestPyPI
        run: |
          twine upload --repository testpypi dist/* --verbose
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}

      - name: Test install from TestPyPI
        run: |
          # Create a temporary environment to test installation
          python -m venv test_env
          source test_env/bin/activate
          # Get project name from pyproject.toml (PEP 621)
          PACKAGE_NAME=$(python - <<'PY'
          import sys, tomllib, pathlib
          data = tomllib.loads(pathlib.Path("pyproject.toml").read_text(encoding="utf-8"))
          print(data["project"]["name"])
          PY
          )
          # Install from TestPyPI with retry (TestPyPI can be slow to index)
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ $PACKAGE_NAME || \
          (sleep 30 && pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ $PACKAGE_NAME) || \
          (sleep 60 && pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ $PACKAGE_NAME)
          # Basic import test
          python -c "import flixopt; print('Installation successful!')"

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-22.04
    needs: [publish-testpypi]  # Only run after TestPyPI publish succeeds
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')  # Only on tag push
    environment:
      name: pypi
      url: https://pypi.org/p/flixopt

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Cache build tools (can reuse from TestPyPI job if same runner)
      - name: Cache build tools
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-build-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-build-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools wheel twine

      - name: Build the distribution
        run: |
          python -m build

      - name: Upload to PyPI
        run: |
          twine upload dist/* --verbose
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

      - name: Verify PyPI installation
        run: |
          # Create a temporary environment to test installation
          python -m venv prod_test_env
          source prod_test_env/bin/activate
          # Get project name from pyproject.toml (PEP 621)
          PACKAGE_NAME=$(python - <<'PY'
          import sys, tomllib, pathlib
          data = tomllib.loads(pathlib.Path("pyproject.toml").read_text(encoding="utf-8"))
          print(data["project"]["name"])
          PY
          )
          # Wait and retry while PyPI indexes the package
          for d in 30 60 120 180 360 720 1080; do
            sleep "$d"
            pip install "$PACKAGE_NAME" && break || true
          # Basic import test
          python -c "import flixopt; print('PyPI installation successful!')"

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    needs: [publish-pypi]  # Deploy docs after successful PyPI publishing
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Cache documentation dependencies
      - name: Cache documentation dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-docs-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-docs-pip-

      - name: Sync changelog to docs
        run: |
          cp CHANGELOG.md docs/changelog.md
          echo "âœ… Synced changelog to docs"

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      - name: Deploy docs
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Deploying docs after successful PyPI publish: $VERSION"
          mike deploy --push --update-aliases $VERSION latest
          mike set-default --push latest
