name: Python Package CI/CD

on:
  push:
    branches: [main, dev]  # Added develop branch
    tags:
      - 'v*'
  pull_request:
    branches: [main, dev, 'feature/*', 'hotfix/*']
    types: [opened, synchronize, reopened]
  release:
    types: [created]
  workflow_dispatch:  # Allow manual triggering

# Set permissions for security
permissions:
  contents: read

# Cancel previous runs on new push
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  code-quality:
    name: Code Quality (Ruff)
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Cache pip dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml') }}" >> $GITHUB_OUTPUT

      - name: Install Ruff
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff Linting
        run: |
          echo "::group::Ruff Linting"
          ruff check . --output-format=github
          echo "::endgroup::"

      - name: Run Ruff Formatting Check
        run: |
          echo "::group::Ruff Formatting"
          ruff format --check --diff .
          echo "::endgroup::"

  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
        include:
          # Test on multiple OS for latest Python
          - os: macos-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.11'

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .pytest_cache
          key: ${{ needs.code-quality.outputs.cache-key }}-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - name: Run tests with coverage
        run: |
          pytest -v --cov=flixopt --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.python-version == env.PYTHON_VERSION && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  test-release:
    name: Release Test (${{ matrix.os }} Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: code-quality
    if: startsWith(github.ref, 'refs/tags/v')  # Only run on version tags
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ['3.11']

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .pytest_cache
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - name: Run tests with coverage
        run: |
          pytest -v --cov=flixopt --cov-report=xml --cov-report=term-missing

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]

      - name: Run Bandit security scan
        run: |
          bandit -r flixopt/ -f json -o bandit-report.json || true
          bandit -r flixopt/

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: |
            bandit-report.json

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, test-release, security]
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Extract version and validate tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Validate semantic versioning
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi

      - name: Sync changelog to docs
        run: |
          cp CHANGELOG.md docs/changelog.md
          echo "✅ Synced changelog to docs"

      - name: Extract release notes
        run: |
          echo "Extracting release notes for version: ${{ steps.version.outputs.version }}"
          python scripts/extract_release_notes.py ${{ steps.version.outputs.version }} > current_release_notes.md

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          body_path: current_release_notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test, security]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build distribution
        run: python -m build

      - name: Check distribution
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution-files
          path: dist/
          retention-days: 7

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [create-release, build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/flixopt

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: distribution-files
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          verbose: true

      - name: Test TestPyPI installation
        run: |
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ flixopt
          python -c "import flixopt; print('TestPyPI installation successful!')"

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [publish-testpypi]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/flixopt

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: distribution-files
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

      - name: Verify PyPI installation
        run: |
          sleep 60  # Wait for PyPI indexing
          pip install flixopt
          python -c "import flixopt; print('PyPI installation successful!')"

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')
    environment:
      name: docs
      url: https://your-docs-url.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache documentation dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-docs-${{ hashFiles('**/pyproject.toml') }}

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Sync changelog to docs
        run: |
          cp CHANGELOG.md docs/changelog.md
          echo "✅ Synced changelog to docs"

      - name: Configure Git
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      - name: Deploy documentation
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Deploying docs for version: $VERSION"
          mike deploy --push --update-aliases $VERSION latest
          mike set-default --push latest

  notify:
    name: Notify on Completion
    runs-on: ubuntu-latest
    needs: [deploy-docs]
    if: always() && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Notify success
        if: needs.deploy-docs.result == 'success'
        run: |
          echo "🎉 Release pipeline completed successfully!"
          echo "✅ Published to PyPI"
          echo "✅ Documentation deployed"

      - name: Notify failure
        if: failure()
        run: |
          echo "❌ Release pipeline failed!"
          echo "Check the logs for details."